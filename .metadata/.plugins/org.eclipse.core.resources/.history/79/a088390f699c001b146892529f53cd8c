package reflection;


import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

import org.junit.jupiter.api.Test;

public class FilledPersonTest {
	@Test
	void test1() throws Exception {
		Class<FilledPerson> clazz = FilledPerson.class;

		// 获取属性结构
		Field[] fields = clazz.getDeclaredFields();
		for (Field field : fields) {
			System.out.println(field);
		}
	}

	// 权限修饰符 数据类型 变量名
	@Test
	void test2() throws Exception {
		Class<FilledPerson> clazz = FilledPerson.class;

		Field[] declaredFields = clazz.getDeclaredFields();
		for (Field field : declaredFields) {
			System.out.println(field);
			// 权限修饰符
			System.out.println(Modifier.toString(field.getModifiers()));
			// 数据类型
			System.out.println(field.getType().getName());
			// 变量名
			System.out.println(field.getName());
			System.err.println();
		}
	}

	@Test
	public void methodTest() throws Exception {
		Class<FilledPerson> clazz = FilledPerson.class;
		Method[] methods = clazz.getDeclaredMethods();
		for (Method method : methods) {
			System.out.println(method);
//			// 获取方法声明的注解
//			Annotation[] annotations = method.getAnnotations();
//			for (Annotation annotation : annotations) {
//				System.out.println(annotation);
//			}
		}
	}
}
